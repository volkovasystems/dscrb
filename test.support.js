"use strict";

/*;
	@test-license:
		The MIT License (MIT)
		@mit-license

		Copyright (@c) 2017 Richeve Siodina Bebedor
		@email: richeve.bebedor@gmail.com

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in all
		copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
	@end-test-license

	@test-configuration:
		{
			"package": "dscrb",
			"path": "dscrb/test.module.js",
			"file": "test.module.js",
			"module": "test",
			"author": "Richeve S. Bebedor",
			"eMail": "richeve.bebedor@gmail.com",
			"contributors": [
				"John Lenon Maghanoy <johnlenonmaghanoy@gmail.com>",
				"Vinse Vinalon <vinsevinalon@gmail.com>"
			],
			"repository": "https://github.com/volkovasystems/dscrb.git"
		}
	@end-test-configuration

	@test-documentation:

	@end-test-documentation

	@include:
		{
			"assert": "should/as-function",
			"dscrb": "dscrb",
			"path": "path"
		}
	@end-include
*/var _defineProperty2=require("babel-runtime/helpers/defineProperty");var _defineProperty3=_interopRequireDefault(_defineProperty2);var _for=require("babel-runtime/core-js/symbol/for");var _for2=_interopRequireDefault(_for);var _typeof2=require("babel-runtime/helpers/typeof");var _typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var assert=require("should/as-function");



//: @client:
var dscrb=require("./dscrb.support.js");
//: @end-client





//: @client:
describe("dscrb",function(){

describe("`dscrb( 'property', { 'property': 'value' } )`",function(){
it("should return an instance of Descriptor",function(){
var descriptor=dscrb("property",{"property":"value"});

assert.equal(descriptor instanceof dscrb.Descriptor,true);
});
});

describe("`dscrb( 'property', { 'property': 'value' } ).describe( )`",function(){
it("should return a descriptor object with complete descriptor properties",function(){
var descriptor=dscrb("property",{"property":"value"}).describe();

assert.equal(typeof descriptor==="undefined"?"undefined":(0,_typeof3.default)(descriptor),"object");

assert.equal("value"in descriptor,true);

assert.equal("get"in descriptor,true);

assert.equal("set"in descriptor,true);

assert.equal("configurable"in descriptor,true);

assert.equal("enumerable"in descriptor,true);

assert.equal("writable"in descriptor,true);
});
});

describe("`dscrb( 'length', [ 1, 2, 3 ] ).describe( )`",function(){
it("should return a descriptor object with complete descriptor properties",function(){
var descriptor=dscrb("length",[1,2,3]).describe();

assert.equal(typeof descriptor==="undefined"?"undefined":(0,_typeof3.default)(descriptor),"object");

assert.equal("value"in descriptor,true);

assert.equal("get"in descriptor,true);

assert.equal("set"in descriptor,true);

assert.equal("configurable"in descriptor,true);

assert.equal("enumerable"in descriptor,true);

assert.equal("writable"in descriptor,true);
});
});

describe("`dscrb( 1, { 0: 'hello', 1: 'world' } ).describe( )`",function(){
it("should return a descriptor object with complete descriptor properties",function(){
var descriptor=dscrb(1,{0:"hello",1:"world"}).describe();

assert.equal(typeof descriptor==="undefined"?"undefined":(0,_typeof3.default)(descriptor),"object");

assert.equal("value"in descriptor,true);

assert.equal("get"in descriptor,true);

assert.equal("set"in descriptor,true);

assert.equal("configurable"in descriptor,true);

assert.equal("enumerable"in descriptor,true);

assert.equal("writable"in descriptor,true);

});
});

describe("`dscrb( Symbol.for( 'hello' ), { [ Symbol.for( 'hello' ) ]: 'test' } ).describe( )`",function(){
it("should return a descriptor object with complete descriptor properties",function(){
var descriptor=dscrb((0,_for2.default)("hello"),(0,_defineProperty3.default)({},(0,_for2.default)("hello"),"test")).describe();

assert.equal(typeof descriptor==="undefined"?"undefined":(0,_typeof3.default)(descriptor),"object");

assert.equal("value"in descriptor,true);

assert.equal("get"in descriptor,true);

assert.equal("set"in descriptor,true);

assert.equal("configurable"in descriptor,true);

assert.equal("enumerable"in descriptor,true);

assert.equal("writable"in descriptor,true);
});
});

describe("`dscrb( 'name', function yeah( ){ } ).describe( )`",function(){
it("should return a descriptor object with complete descriptor properties",function(){
var descriptor=dscrb("name",function yeah(){}).describe();

assert.equal(typeof descriptor==="undefined"?"undefined":(0,_typeof3.default)(descriptor),"object");

assert.equal("value"in descriptor,true);

assert.equal("get"in descriptor,true);

assert.equal("set"in descriptor,true);

assert.equal("configurable"in descriptor,true);

assert.equal("enumerable"in descriptor,true);

assert.equal("writable"in descriptor,true);
});
});

describe("`dscrb with symbol type property and function type entity`",function(){
it("should return a descriptor object with complete descriptor properties",function(){
var Hello=function Hello(){};
Hello[(0,_for2.default)("extensive")]=(0,_for2.default)("extensive");
var descriptor=dscrb((0,_for2.default)("extensive"),Hello).describe();

assert.equal(typeof descriptor==="undefined"?"undefined":(0,_typeof3.default)(descriptor),"object");

assert.equal("value"in descriptor,true);

assert.equal("get"in descriptor,true);

assert.equal("set"in descriptor,true);

assert.equal("configurable"in descriptor,true);

assert.equal("enumerable"in descriptor,true);

assert.equal("writable"in descriptor,true);

});
});

describe("`dscrb( 'property', { 'property': 'value' } ).configurable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb("property",{"property":"value"}).configurable(),true);
});
});

describe("`dscrb( 'property', { 'property': 'value' } ).writable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb("property",{"property":"value"}).writable(),true);
});
});

describe("`dscrb( 'property', { 'property': 'value' } ).enumerable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb("property",{"property":"value"}).enumerable(),true);
});
});

describe("`dscrb( 'length', [ 1, 2, 3 ] ).configurable( )`",function(){
it("should be equal to false",function(){
assert.equal(dscrb("length",[1,2,3]).configurable(),false);
});
});

describe("`dscrb( 'length', [ 1, 2, 3 ] ).writable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb("length",[1,2,3]).writable(),true);
});
});

describe("`dscrb( 'length', [ 1, 2, 3 ] ).enumerable( )`",function(){
it("should be equal to false",function(){
assert.equal(dscrb("length",[1,2,3]).enumerable(),false);
});
});

describe("`dscrb( 1, { 0: 'hello', 1: 'world' } ).configurable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb(1,{0:"hello",1:"world"}).configurable(),true);
});
});

describe("`dscrb( 1, { 0: 'hello', 1: 'world' } ).writable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb(1,{0:"hello",1:"world"}).writable(),true);
});
});

describe("`dscrb( 1, { 0: 'hello', 1: 'world' } ).enumerable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb(1,{0:"hello",1:"world"}).enumerable(),true);
});
});

describe("`dscrb( Symbol.for( 'hello' ), { [ Symbol.for( 'hello' ) ]: 'test' } ).configurable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb((0,_for2.default)("hello"),(0,_defineProperty3.default)({},(0,_for2.default)("hello"),"test")).configurable(),true);
});
});

describe("`dscrb( Symbol.for( 'hello' ), { [ Symbol.for( 'hello' ) ]: 'test' } ).writable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb((0,_for2.default)("hello"),(0,_defineProperty3.default)({},(0,_for2.default)("hello"),"test")).writable(),true);
});
});

describe("`dscrb( Symbol.for( 'hello' ), { [ Symbol.for( 'hello' ) ]: 'test' } ).enumerable( )`",function(){
it("should be equal to false",function(){
assert.equal(dscrb((0,_for2.default)("hello"),(0,_defineProperty3.default)({},(0,_for2.default)("hello"),"test")).enumerable(),false);
});
});

describe("`dscrb( 'name', function yeah( ){ } ).configurable( )`",function(){
it("should be equal to true",function(){
assert.equal(dscrb("name",function yeah(){}).configurable(),true);
});
});

describe("`dscrb( 'name', function yeah( ){ } ).writable( )`",function(){
it("should be equal to false",function(){
assert.equal(dscrb("name",function yeah(){}).writable(),false);
});
});

describe("`dscrb( 'name', function yeah( ){ } ).enumerable( )`",function(){
it("should be equal to false",function(){
assert.equal(dscrb("name",function yeah(){}).enumerable(),false);
});
});

describe("`dscrb configurable method with symbol type property and function type entity`",function(){
it("should be equal to true",function(){
var Hello=function Hello(){};
Hello[(0,_for2.default)("extensive")]=(0,_for2.default)("extensive");
var result=dscrb((0,_for2.default)("extensive"),Hello).configurable();

assert.equal(result,true);

});
});

describe("`dscrb writable method with symbol type property and function type entity`",function(){
it("should be equal to true",function(){
var Hello=function Hello(){};
Hello[(0,_for2.default)("extensive")]=(0,_for2.default)("extensive");
var result=dscrb((0,_for2.default)("extensive"),Hello).writable();

assert.equal(result,true);

});
});

describe("`dscrb enumerable method with symbol type property and function type entity`",function(){
it("should be equal to false",function(){
var Hello=function Hello(){};
Hello[(0,_for2.default)("extensive")]=(0,_for2.default)("extensive");
var result=dscrb((0,_for2.default)("extensive"),Hello).enumerable();

assert.equal(result,false);

});
});

});
//: @end-client
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=test.support.js.map
