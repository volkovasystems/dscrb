"use strict";

/*;
	@submodule-license:
		The MIT License (MIT)
		@mit-license

		Copyright (@c) 2017 Richeve Siodina Bebedor
		@email: richeve.bebedor@gmail.com

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in all
		copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
	@end-submodule-license

	@submodule-configuration:
		{
			"package": "dscrb",
			"path": "dscrb/descriptor.module.js",
			"file": "descriptor.module.js",
			"module": "dscrb",
			"author": "Richeve S. Bebedor",
			"eMail": "richeve.bebedor@gmail.com",
			"contributors": [
				"John Lenon Maghanoy <johnlenonmaghanoy@gmail.com>",
				"Vinse Vinalon <vinsevinalon@gmail.com>"
			],
			"repository": "https://github.com/volkovasystems/dscrb.git",
			"test": "dscrb-test.js",
			"class": true,
			"global": false
		}
	@end-submodule-configuration

	@submodule-documentation:
		Descriptor class wrapper.

		This class was designed with strict adherence to the descriptor specification.
		Certain methods may throw error if misused properly.
	@end-submodule-documentation

	@include:
		{
			"allkey": "allkey",
			"anykey": "anykey",
			"detr": "detr",
			"falzy": "falzy",
			"kein": "kein",
			"raze": "raze"
		}
	@end-include
*/var _stringify=require("babel-runtime/core-js/json/stringify");var _stringify2=_interopRequireDefault(_stringify);var _defineProperty=require("babel-runtime/core-js/object/define-property");var _defineProperty2=_interopRequireDefault(_defineProperty);var _getOwnPropertyDescriptor=require("babel-runtime/core-js/object/get-own-property-descriptor");var _getOwnPropertyDescriptor2=_interopRequireDefault(_getOwnPropertyDescriptor);var _freeze=require("babel-runtime/core-js/object/freeze");var _freeze2=_interopRequireDefault(_freeze);var _typeof2=require("babel-runtime/helpers/typeof");var _typeof3=_interopRequireDefault(_typeof2);var _classCallCheck2=require("babel-runtime/helpers/classCallCheck");var _classCallCheck3=_interopRequireDefault(_classCallCheck2);var _createClass2=require("babel-runtime/helpers/createClass");var _createClass3=_interopRequireDefault(_createClass2);var _symbol=require("babel-runtime/core-js/symbol");var _symbol2=_interopRequireDefault(_symbol);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}

var allkey=require("allkey");
var anykey=require("anykey");
var detr=require("detr");
var falzy=require("falzy");
var kein=require("kein");
var raze=require("raze");

var DESCRIPTOR=(0,_symbol2.default)("descriptor");
var ENTITY=(0,_symbol2.default)("entity");
var PROPERTY=(0,_symbol2.default)("property");
var TYPE=(0,_symbol2.default)("type");

var ACCESSOR_DESCRIPTOR="accessor-descriptor";
var DATA_DESCRIPTOR="data-descriptor";var

Descriptor=function(){
function Descriptor(property,entity){(0,_classCallCheck3.default)(this,Descriptor);
/*;
			@meta-configuration:
				{
					"property:required": [
						"number"
						"string",
						"symbol"
					],
					"entity": "*"
				}
			@end-meta-configuration
		*/

if(
falzy(property)||
typeof property!="number"&&typeof property!="string"&&(typeof property==="undefined"?"undefined":(0,_typeof3.default)(property))!="symbol")
{
throw new Error("invalid property");
}

if(falzy(entity)){
throw new Error("invalid entity");
}

if(!kein(property,entity)){
throw new Error("property does not exists");
}

this[PROPERTY]=property;
this[ENTITY]=entity;

this.describe();

this.determine();
}(0,_createClass3.default)(Descriptor,[{key:"describe",value:function describe()

{
var value=this[ENTITY][this[PROPERTY]];
var enumerable=(0,_typeof3.default)(this[PROPERTY])!="symbol";

this.setDescriptor(detr(this.extractDescriptor(),function defer(descriptor){
if(anykey(["get","set"],descriptor)){
return{
"get":descriptor.get,
"set":descriptor.set,

"configurable":true,
"enumerable":enumerable};


}else{
return{
"value":descriptor.value,
"writable":true,

"configurable":true,
"enumerable":enumerable};

}
}));

return this;
}},{key:"determine",value:function determine()

{
if(anykey(["get","set"],this[DESCRIPTOR])){
this[TYPE]=ACCESSOR_DESCRIPTOR;
}

if(allkey(["value","writable"],this[DESCRIPTOR])){
this[TYPE]=DATA_DESCRIPTOR;
}

return this;
}},{key:"get",value:function get()

{
if(this.isDataDescriptor()){
return this[DESCRIPTOR].value;
}

return this[DESCRIPTOR].get.apply(this[ENTITY],raze(arguments));
}},{key:"set",value:function set(

value){
if(this.isDataDescriptor()){
this[DESCRIPTOR].value=value;

}else{
this[DESCRIPTOR].set.apply(this[ENTITY],raze(arguments));
}

return this;
}},{key:"value",value:function value()

{
if(this.isAccessorDescriptor()){
return this.get();
}

return this[DESCRIPTOR].value;
}},{key:"writable",value:function writable()

{
if(this.isAccessorDescriptor()){
return false;
}

return this[DESCRIPTOR].writable;
}},{key:"configurable",value:function configurable()

{
return this[DESCRIPTOR].configurable;
}},{key:"enumerable",value:function enumerable()

{
return this[DESCRIPTOR].enumerable;
}},{key:"isAccessorDescriptor",value:function isAccessorDescriptor()

{
return this[TYPE]===ACCESSOR_DESCRIPTOR;
}},{key:"isDataDescriptor",value:function isDataDescriptor()

{
return this[TYPE]===DATA_DESCRIPTOR;
}},{key:"resolveDescriptor",value:function resolveDescriptor()

{
var descriptor={
"configurable":this[DESCRIPTOR].configurable,
"enumerable":this[DESCRIPTOR].enumerable};


if(this.isAccessorDescriptor()){
descriptor.get=this[DESCRIPTOR].get||function get(){
return this.value;
}.bind(this[DESCRIPTOR]);

descriptor.set=this[DESCRIPTOR].set||function set(value){
this.value=value;

return this;
}.bind(this[DESCRIPTOR]);
}

if(this.isDataDescriptor()){
descriptor.value=this[DESCRIPTOR].value;
descriptor.writable=this[DESCRIPTOR].writable;
}

return(0,_freeze2.default)(descriptor);
}},{key:"extractDescriptor",value:function extractDescriptor()

{
try{
return(0,_getOwnPropertyDescriptor2.default)(this[ENTITY],this[PROPERTY]);

}catch(error){
return{};
}
}},{key:"applyDescriptor",value:function applyDescriptor()

{
/*;
			@note:
				There's no sense to apply descriptor to falsy, non-object or non-function entity.
			@end-note
		*/
if(
(0,_typeof3.default)(this[ENTITY])!="object"&&
typeof this[ENTITY]!="function")
{
return this;
}

try{
(0,_defineProperty2.default)(this[ENTITY],this[PROPERTY],this.resolveDescriptor());

}catch(error){
throw new Error("cannot apply descriptor, "+error.stack);
}

return this;
}},{key:"getDescriptor",value:function getDescriptor()

{
return this.resolveDescriptor();
}},{key:"setDescriptor",value:function setDescriptor(

descriptor){
if((typeof descriptor==="undefined"?"undefined":(0,_typeof3.default)(descriptor))=="object"){
this[DESCRIPTOR]=descriptor;
}

return this;
}},{key:"toJSON",value:function toJSON()

{
return this.resolveDescriptor();
}},{key:"valueOf",value:function valueOf()

{
return this.resolveDescriptor();
}},{key:"toString",value:function toString()

{
return(0,_stringify2.default)(this.toJSON());
}}]);return Descriptor;}();


module.exports=Descriptor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=descriptor.support.js.map
